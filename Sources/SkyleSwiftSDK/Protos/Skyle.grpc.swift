//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Skyle.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Skyle_SkyleClient, then call methods of this protocol to make API calls.
public protocol Skyle_SkyleClientProtocol: GRPCClient {
  func calibrate(
    callOptions: CallOptions?,
    handler: @escaping (Skyle_CalibMessages) -> Void
  ) -> BidirectionalStreamingCall<Skyle_calibControlMessages, Skyle_CalibMessages>

  func positioning(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Skyle_PositioningMessage) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_PositioningMessage>

  func gaze(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Skyle_Point) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_Point>

  func trigger(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Skyle_TriggerMessage) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_TriggerMessage>

  func getButton(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_Button>

  func setButton(
    _ request: Skyle_ButtonActions,
    callOptions: CallOptions?
  ) -> UnaryCall<Skyle_ButtonActions, Skyle_ButtonActions>

  func configure(
    _ request: Skyle_OptionMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Skyle_OptionMessage, Skyle_Options>

  func getVersions(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_DeviceVersions>

  func getProfiles(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Skyle_Profile) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_Profile>

  func currentProfile(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_Profile>

  func setProfile(
    _ request: Skyle_Profile,
    callOptions: CallOptions?
  ) -> UnaryCall<Skyle_Profile, Skyle_StatusMessage>

  func deleteProfile(
    _ request: Skyle_Profile,
    callOptions: CallOptions?
  ) -> UnaryCall<Skyle_Profile, Skyle_StatusMessage>

  func reset(
    _ request: Skyle_ResetMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Skyle_ResetMessage, Skyle_StatusMessage>

}

extension Skyle_SkyleClientProtocol {

  ///Used to calibrate for the current user. Streams in both directions with given message types. Client needs to close the stream when done
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func calibrate(
    callOptions: CallOptions? = nil,
    handler: @escaping (Skyle_CalibMessages) -> Void
  ) -> BidirectionalStreamingCall<Skyle_calibControlMessages, Skyle_CalibMessages> {
    return self.makeBidirectionalStreamingCall(
      path: "/Skyle.Skyle/Calibrate",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  ///Subscribe a stream sending eye positions and quality indicators to achieve good positioning of a user. Client needs to close the stream when done
  ///
  /// - Parameters:
  ///   - request: Request to send to Positioning.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func positioning(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Skyle_PositioningMessage) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_PositioningMessage> {
    return self.makeServerStreamingCall(
      path: "/Skyle.Skyle/Positioning",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  ///Subscribe a gaze stream, that sends coordinates of the current user gaze on a screen. Client needs to close the stream when done
  ///
  /// - Parameters:
  ///   - request: Request to send to Gaze.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func gaze(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Skyle_Point) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_Point> {
    return self.makeServerStreamingCall(
      path: "/Skyle.Skyle/Gaze",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  ///Subscribe a trigger stream, that sends trigger messages, when a user fixates a point or clicks. Client needs to close the stream when done
  ///
  /// - Parameters:
  ///   - request: Request to send to Trigger.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func trigger(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Skyle_TriggerMessage) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_TriggerMessage> {
    return self.makeServerStreamingCall(
      path: "/Skyle.Skyle/Trigger",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  ///Unary call to get the button status
  ///
  /// - Parameters:
  ///   - request: Request to send to GetButton.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getButton(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_Button> {
    return self.makeUnaryCall(
      path: "/Skyle.Skyle/GetButton",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///Unary call to configure the button actions, answers with the resulting configuration
  ///
  /// - Parameters:
  ///   - request: Request to send to SetButton.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setButton(
    _ request: Skyle_ButtonActions,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Skyle_ButtonActions, Skyle_ButtonActions> {
    return self.makeUnaryCall(
      path: "/Skyle.Skyle/SetButton",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///Unary call to get (OptionMessage -> empty) or set options (OptionMessage -> Options). Answers with the resulting options. Options are saved to the current user profile
  ///
  /// - Parameters:
  ///   - request: Request to send to Configure.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func configure(
    _ request: Skyle_OptionMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Skyle_OptionMessage, Skyle_Options> {
    return self.makeUnaryCall(
      path: "/Skyle.Skyle/Configure",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///Unary call to get software versions
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVersions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVersions(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_DeviceVersions> {
    return self.makeUnaryCall(
      path: "/Skyle.Skyle/GetVersions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///Subscribe a profile stream of all available profiles. Host ends stream when all results are sent
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProfiles.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func getProfiles(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Skyle_Profile) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_Profile> {
    return self.makeServerStreamingCall(
      path: "/Skyle.Skyle/GetProfiles",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  ///Unary call to get the current profile
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func currentProfile(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Skyle_Profile> {
    return self.makeUnaryCall(
      path: "/Skyle.Skyle/CurrentProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///Unary call to set or create a profile. Answers with a status message (success or failure)
  ///
  /// - Parameters:
  ///   - request: Request to send to SetProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setProfile(
    _ request: Skyle_Profile,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Skyle_Profile, Skyle_StatusMessage> {
    return self.makeUnaryCall(
      path: "/Skyle.Skyle/SetProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///Unary call to delete a profile. Answers with a status message (success or failure)
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteProfile.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteProfile(
    _ request: Skyle_Profile,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Skyle_Profile, Skyle_StatusMessage> {
    return self.makeUnaryCall(
      path: "/Skyle.Skyle/DeleteProfile",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  ///Unary call to reset specific parts 
  ///
  /// - Parameters:
  ///   - request: Request to send to Reset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func reset(
    _ request: Skyle_ResetMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Skyle_ResetMessage, Skyle_StatusMessage> {
    return self.makeUnaryCall(
      path: "/Skyle.Skyle/Reset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Skyle_SkyleClient: Skyle_SkyleClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the Skyle.Skyle service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Skyle_SkyleProvider: CallHandlerProvider {
  ///Used to calibrate for the current user. Streams in both directions with given message types. Client needs to close the stream when done
  func calibrate(context: StreamingResponseCallContext<Skyle_CalibMessages>) -> EventLoopFuture<(StreamEvent<Skyle_calibControlMessages>) -> Void>
  ///Subscribe a stream sending eye positions and quality indicators to achieve good positioning of a user. Client needs to close the stream when done
  func positioning(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Skyle_PositioningMessage>) -> EventLoopFuture<GRPCStatus>
  ///Subscribe a gaze stream, that sends coordinates of the current user gaze on a screen. Client needs to close the stream when done
  func gaze(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Skyle_Point>) -> EventLoopFuture<GRPCStatus>
  ///Subscribe a trigger stream, that sends trigger messages, when a user fixates a point or clicks. Client needs to close the stream when done
  func trigger(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Skyle_TriggerMessage>) -> EventLoopFuture<GRPCStatus>
  ///Unary call to get the button status
  func getButton(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Skyle_Button>
  ///Unary call to configure the button actions, answers with the resulting configuration
  func setButton(request: Skyle_ButtonActions, context: StatusOnlyCallContext) -> EventLoopFuture<Skyle_ButtonActions>
  ///Unary call to get (OptionMessage -> empty) or set options (OptionMessage -> Options). Answers with the resulting options. Options are saved to the current user profile
  func configure(request: Skyle_OptionMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Skyle_Options>
  ///Unary call to get software versions
  func getVersions(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Skyle_DeviceVersions>
  ///Subscribe a profile stream of all available profiles. Host ends stream when all results are sent
  func getProfiles(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<Skyle_Profile>) -> EventLoopFuture<GRPCStatus>
  ///Unary call to get the current profile
  func currentProfile(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Skyle_Profile>
  ///Unary call to set or create a profile. Answers with a status message (success or failure)
  func setProfile(request: Skyle_Profile, context: StatusOnlyCallContext) -> EventLoopFuture<Skyle_StatusMessage>
  ///Unary call to delete a profile. Answers with a status message (success or failure)
  func deleteProfile(request: Skyle_Profile, context: StatusOnlyCallContext) -> EventLoopFuture<Skyle_StatusMessage>
  ///Unary call to reset specific parts 
  func reset(request: Skyle_ResetMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Skyle_StatusMessage>
}

extension Skyle_SkyleProvider {
  public var serviceName: String { return "Skyle.Skyle" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Calibrate":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.calibrate(context: context)
      }

    case "Positioning":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.positioning(request: request, context: context)
        }
      }

    case "Gaze":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.gaze(request: request, context: context)
        }
      }

    case "Trigger":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.trigger(request: request, context: context)
        }
      }

    case "GetButton":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getButton(request: request, context: context)
        }
      }

    case "SetButton":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setButton(request: request, context: context)
        }
      }

    case "Configure":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.configure(request: request, context: context)
        }
      }

    case "GetVersions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getVersions(request: request, context: context)
        }
      }

    case "GetProfiles":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getProfiles(request: request, context: context)
        }
      }

    case "CurrentProfile":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.currentProfile(request: request, context: context)
        }
      }

    case "SetProfile":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setProfile(request: request, context: context)
        }
      }

    case "DeleteProfile":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteProfile(request: request, context: context)
        }
      }

    case "Reset":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.reset(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

